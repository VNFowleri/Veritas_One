import os
import jwt  # PyJWT for signing JWTs
import requests
import datetime
import uuid
import jwt  # PyJWT for signing
from dotenv import load_dotenv
from fastapi import APIRouter, HTTPException

# âœ… Load environment variables from .env
load_dotenv()

router = APIRouter(prefix="/fhir", tags=["Epic FHIR API"])

# âœ… Epic FHIR API URLs & Credentials
FHIR_CLIENT_ID = os.getenv("FHIR_CLIENT_ID")
TOKEN_URL = os.getenv("FHIR_TOKEN_URL", "https://fhir.epic.com/interconnect-fhir-oauth/oauth2/token")
FHIR_API_URL = os.getenv("FHIR_API_URL", "https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/R4")
PRIVATE_KEY_PATH = os.getenv("PRIVATE_KEY_PATH", "private_key.pem")
JWT_ALGORITHM = os.getenv("JWT_ALGORITHM", "RS256")
JWT_EXPIRATION_MINUTES = int(os.getenv("JWT_EXPIRATION_MINUTES", 5))

def generate_jwt():
    """
    Creates a signed JWT for Epic OAuth authentication.
    """
    now = datetime.datetime.utcnow()
    payload = {
        "iss": FHIR_CLIENT_ID,  # Epic App Client ID
        "sub": FHIR_CLIENT_ID,  # Must be the same as "iss"
        "aud": TOKEN_URL,  # Epic token endpoint
        "jti": os.urandom(16).hex(),  # Generate a unique JWT ID
        "exp": now + datetime.timedelta(minutes=JWT_EXPIRATION_MINUTES),
        "iat": now,
        "nbf": now
    }
    # ðŸ”¹ Explicitly Use RS256 for Signing
    jwt_token = jwt.encode(payload, private_key, algorithm="RS256")

    return jwt_token

    # âœ… Load Private Key
    with open(PRIVATE_KEY_PATH, "r") as key_file:
        private_key = key_file.read()

    # âœ… Sign JWT using RS256
    signed_jwt = jwt.encode(payload, private_key, algorithm=JWT_ALGORITHM)

    print("ðŸ”¹ Generated JWT:", signed_jwt)  # âœ… Debugging

    return signed_jwt

def get_access_token():
    """
    Requests an OAuth access token from Epic using JWT authentication.
    """
    jwt_token = generate_jwt()

    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    payload = {
        "grant_type": "client_credentials",
        "client_assertion_type": "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
        "client_assertion": jwt_token,
    }

    print("ðŸ”¹ Sending OAuth Request with JWT...")  # âœ… Debugging

    response = requests.post(TOKEN_URL, headers=headers, data=payload)

    print("ðŸ”¹ Epic OAuth Response Status:", response.status_code)
    print("ðŸ”¹ Epic OAuth Response Body:", response.text)

    if response.status_code == 200:
        return response.json().get("access_token")

    raise HTTPException(status_code=response.status_code, detail=f"Failed to obtain access token: {response.text}")

@router.get("/patient/{patient_id}")
def fetch_patient_data(patient_id: str):
    """
    Fetch patient data from Epic FHIR API using an OAuth access token.
    """
    access_token = get_access_token()
    headers = {"Authorization": f"Bearer {access_token}"}

    response = requests.get(f"{FHIR_API_URL}/Patient/{patient_id}", headers=headers)

    print("ðŸ”¹ FHIR API Response Status:", response.status_code)
    print("ðŸ”¹ FHIR API Response Body:", response.text)

    if response.status_code == 200:
        return response.json()

    raise HTTPException(status_code=response.status_code, detail=f"Failed to fetch patient data: {response.text}")